//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReferenceMedia
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Medias", Namespace="http://schemas.datacontract.org/2004/07/Proiect1Net", IsReference=true)]
    public partial class Medias : object
    {
        
        private System.Nullable<System.DateTime> CreationDateField;
        
        private ServiceReferenceMedia.Event EventField;
        
        private int IdField;
        
        private bool IsRemovedField;
        
        private bool IsVideoField;
        
        private string NoteField;
        
        private string PathField;
        
        private ServiceReferenceMedia.Person[] PeopleField;
        
        private System.Nullable<int> RatingField;
        
        private ServiceReferenceMedia.Scenary ScenaryField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CreationDate
        {
            get
            {
                return this.CreationDateField;
            }
            set
            {
                this.CreationDateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReferenceMedia.Event Event
        {
            get
            {
                return this.EventField;
            }
            set
            {
                this.EventField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRemoved
        {
            get
            {
                return this.IsRemovedField;
            }
            set
            {
                this.IsRemovedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsVideo
        {
            get
            {
                return this.IsVideoField;
            }
            set
            {
                this.IsVideoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Note
        {
            get
            {
                return this.NoteField;
            }
            set
            {
                this.NoteField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path
        {
            get
            {
                return this.PathField;
            }
            set
            {
                this.PathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReferenceMedia.Person[] People
        {
            get
            {
                return this.PeopleField;
            }
            set
            {
                this.PeopleField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Rating
        {
            get
            {
                return this.RatingField;
            }
            set
            {
                this.RatingField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReferenceMedia.Scenary Scenary
        {
            get
            {
                return this.ScenaryField;
            }
            set
            {
                this.ScenaryField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Event", Namespace="http://schemas.datacontract.org/2004/07/Proiect1Net", IsReference=true)]
    public partial class Event : object
    {
        
        private int IdField;
        
        private string LocationField;
        
        private ServiceReferenceMedia.Medias[] MediasField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Location
        {
            get
            {
                return this.LocationField;
            }
            set
            {
                this.LocationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReferenceMedia.Medias[] Medias
        {
            get
            {
                return this.MediasField;
            }
            set
            {
                this.MediasField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Scenary", Namespace="http://schemas.datacontract.org/2004/07/Proiect1Net", IsReference=true)]
    public partial class Scenary : object
    {
        
        private int IdField;
        
        private ServiceReferenceMedia.Medias[] MediasField;
        
        private string SeasonField;
        
        private string TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReferenceMedia.Medias[] Medias
        {
            get
            {
                return this.MediasField;
            }
            set
            {
                this.MediasField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Season
        {
            get
            {
                return this.SeasonField;
            }
            set
            {
                this.SeasonField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type
        {
            get
            {
                return this.TypeField;
            }
            set
            {
                this.TypeField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Person", Namespace="http://schemas.datacontract.org/2004/07/Proiect1Net", IsReference=true)]
    public partial class Person : object
    {
        
        private string FirstNameField;
        
        private int IdField;
        
        private string LastNameField;
        
        private ServiceReferenceMedia.Medias[] MediasField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName
        {
            get
            {
                return this.FirstNameField;
            }
            set
            {
                this.FirstNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName
        {
            get
            {
                return this.LastNameField;
            }
            set
            {
                this.LastNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReferenceMedia.Medias[] Medias
        {
            get
            {
                return this.MediasField;
            }
            set
            {
                this.MediasField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferenceMedia.IPostMedia")]
    public interface IPostMedia
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMedia/GetAllMedia", ReplyAction="http://tempuri.org/InterfaceMedia/GetAllMediaResponse")]
        System.Threading.Tasks.Task<ServiceReferenceMedia.Medias[]> GetAllMediaAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMedia/GetAllPhotos", ReplyAction="http://tempuri.org/InterfaceMedia/GetAllPhotosResponse")]
        System.Threading.Tasks.Task<ServiceReferenceMedia.Medias[]> GetAllPhotosAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMedia/GetAllVideos", ReplyAction="http://tempuri.org/InterfaceMedia/GetAllVideosResponse")]
        System.Threading.Tasks.Task<ServiceReferenceMedia.Medias[]> GetAllVideosAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMedia/UpdateMedia", ReplyAction="http://tempuri.org/InterfaceMedia/UpdateMediaResponse")]
        System.Threading.Tasks.Task<bool> UpdateMediaAsync(ServiceReferenceMedia.Medias media);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMedia/AddMedia", ReplyAction="http://tempuri.org/InterfaceMedia/AddMediaResponse")]
        System.Threading.Tasks.Task<bool> AddMediaAsync(string path, System.DateTime creationDate, ServiceReferenceMedia.Event ev, bool isVideo, string note, int rating, ServiceReferenceMedia.Person[] people, ServiceReferenceMedia.Scenary scenary);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMedia/FilterMedia", ReplyAction="http://tempuri.org/InterfaceMedia/FilterMediaResponse")]
        System.Threading.Tasks.Task<ServiceReferenceMedia.Medias[]> FilterMediaAsync(System.DateTime creationDateStart, System.DateTime creationDateEnd, string eventName, string eventLocation, int isVideo, ServiceReferenceMedia.Person person, string scenary, string season);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMedia/GetMediaById", ReplyAction="http://tempuri.org/InterfaceMedia/GetMediaByIdResponse")]
        System.Threading.Tasks.Task<ServiceReferenceMedia.Medias> GetMediaByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMedia/DeleteMedia", ReplyAction="http://tempuri.org/InterfaceMedia/DeleteMediaResponse")]
        System.Threading.Tasks.Task<bool> DeleteMediaAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePerson/AddPerson", ReplyAction="http://tempuri.org/InterfacePerson/AddPersonResponse")]
        System.Threading.Tasks.Task<bool> AddPersonAsync(string firstName, string lastName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePerson/GetAllPeople", ReplyAction="http://tempuri.org/InterfacePerson/GetAllPeopleResponse")]
        System.Threading.Tasks.Task<ServiceReferenceMedia.Person[]> GetAllPeopleAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePerson/GetPerson", ReplyAction="http://tempuri.org/InterfacePerson/GetPersonResponse")]
        System.Threading.Tasks.Task<ServiceReferenceMedia.Person> GetPersonAsync(string firstName, string lastName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePerson/GetOrCreatePerson", ReplyAction="http://tempuri.org/InterfacePerson/GetOrCreatePersonResponse")]
        System.Threading.Tasks.Task<ServiceReferenceMedia.Person> GetOrCreatePersonAsync(string firstName, string lastName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePerson/GetAllPeopleNames", ReplyAction="http://tempuri.org/InterfacePerson/GetAllPeopleNamesResponse")]
        System.Threading.Tasks.Task<string[]> GetAllPeopleNamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePerson/GetPersonById", ReplyAction="http://tempuri.org/InterfacePerson/GetPersonByIdResponse")]
        System.Threading.Tasks.Task<ServiceReferenceMedia.Person> GetPersonByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePerson/DeletePerson", ReplyAction="http://tempuri.org/InterfacePerson/DeletePersonResponse")]
        System.Threading.Tasks.Task<bool> DeletePersonAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceEvent/AddEvent", ReplyAction="http://tempuri.org/InterfaceEvent/AddEventResponse")]
        System.Threading.Tasks.Task<bool> AddEventAsync(string name, string location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceEvent/GetAllEvents", ReplyAction="http://tempuri.org/InterfaceEvent/GetAllEventsResponse")]
        System.Threading.Tasks.Task<ServiceReferenceMedia.Event[]> GetAllEventsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceEvent/GetEvent", ReplyAction="http://tempuri.org/InterfaceEvent/GetEventResponse")]
        System.Threading.Tasks.Task<ServiceReferenceMedia.Event> GetEventAsync(string location, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceEvent/GetOrCreateEvent", ReplyAction="http://tempuri.org/InterfaceEvent/GetOrCreateEventResponse")]
        System.Threading.Tasks.Task<ServiceReferenceMedia.Event> GetOrCreateEventAsync(string location, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceEvent/GetEventNames", ReplyAction="http://tempuri.org/InterfaceEvent/GetEventNamesResponse")]
        System.Threading.Tasks.Task<string[]> GetEventNamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceEvent/GetEventLocation", ReplyAction="http://tempuri.org/InterfaceEvent/GetEventLocationResponse")]
        System.Threading.Tasks.Task<string[]> GetEventLocationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceEvent/GetEventById", ReplyAction="http://tempuri.org/InterfaceEvent/GetEventByIdResponse")]
        System.Threading.Tasks.Task<ServiceReferenceMedia.Event> GetEventByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceEvent/DeleteEvent", ReplyAction="http://tempuri.org/InterfaceEvent/DeleteEventResponse")]
        System.Threading.Tasks.Task<bool> DeleteEventAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceScenary/AddScenary", ReplyAction="http://tempuri.org/InterfaceScenary/AddScenaryResponse")]
        System.Threading.Tasks.Task<bool> AddScenaryAsync(string season, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceScenary/GetScenary", ReplyAction="http://tempuri.org/InterfaceScenary/GetScenaryResponse")]
        System.Threading.Tasks.Task<ServiceReferenceMedia.Scenary> GetScenaryAsync(string season, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceScenary/GetOrCreateScenary", ReplyAction="http://tempuri.org/InterfaceScenary/GetOrCreateScenaryResponse")]
        System.Threading.Tasks.Task<ServiceReferenceMedia.Scenary> GetOrCreateScenaryAsync(string season, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceScenary/GetAllScenaries", ReplyAction="http://tempuri.org/InterfaceScenary/GetAllScenariesResponse")]
        System.Threading.Tasks.Task<ServiceReferenceMedia.Scenary[]> GetAllScenariesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceScenary/GetAllScenaryTypes", ReplyAction="http://tempuri.org/InterfaceScenary/GetAllScenaryTypesResponse")]
        System.Threading.Tasks.Task<string[]> GetAllScenaryTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceScenary/GetScenaryById", ReplyAction="http://tempuri.org/InterfaceScenary/GetScenaryByIdResponse")]
        System.Threading.Tasks.Task<ServiceReferenceMedia.Scenary> GetScenaryByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceScenary/DeleteScenary", ReplyAction="http://tempuri.org/InterfaceScenary/DeleteScenaryResponse")]
        System.Threading.Tasks.Task<bool> DeleteScenaryAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IPostMediaChannel : ServiceReferenceMedia.IPostMedia, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class PostMediaClient : System.ServiceModel.ClientBase<ServiceReferenceMedia.IPostMedia>, ServiceReferenceMedia.IPostMedia
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public PostMediaClient() : 
                base(PostMediaClient.GetDefaultBinding(), PostMediaClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IPostMedia.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PostMediaClient(EndpointConfiguration endpointConfiguration) : 
                base(PostMediaClient.GetBindingForEndpoint(endpointConfiguration), PostMediaClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PostMediaClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(PostMediaClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PostMediaClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(PostMediaClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PostMediaClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<ServiceReferenceMedia.Medias[]> GetAllMediaAsync()
        {
            return base.Channel.GetAllMediaAsync();
        }
        
        public System.Threading.Tasks.Task<ServiceReferenceMedia.Medias[]> GetAllPhotosAsync()
        {
            return base.Channel.GetAllPhotosAsync();
        }
        
        public System.Threading.Tasks.Task<ServiceReferenceMedia.Medias[]> GetAllVideosAsync()
        {
            return base.Channel.GetAllVideosAsync();
        }
        
        public System.Threading.Tasks.Task<bool> UpdateMediaAsync(ServiceReferenceMedia.Medias media)
        {
            return base.Channel.UpdateMediaAsync(media);
        }
        
        public System.Threading.Tasks.Task<bool> AddMediaAsync(string path, System.DateTime creationDate, ServiceReferenceMedia.Event ev, bool isVideo, string note, int rating, ServiceReferenceMedia.Person[] people, ServiceReferenceMedia.Scenary scenary)
        {
            return base.Channel.AddMediaAsync(path, creationDate, ev, isVideo, note, rating, people, scenary);
        }
        
        public System.Threading.Tasks.Task<ServiceReferenceMedia.Medias[]> FilterMediaAsync(System.DateTime creationDateStart, System.DateTime creationDateEnd, string eventName, string eventLocation, int isVideo, ServiceReferenceMedia.Person person, string scenary, string season)
        {
            return base.Channel.FilterMediaAsync(creationDateStart, creationDateEnd, eventName, eventLocation, isVideo, person, scenary, season);
        }
        
        public System.Threading.Tasks.Task<ServiceReferenceMedia.Medias> GetMediaByIdAsync(int id)
        {
            return base.Channel.GetMediaByIdAsync(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteMediaAsync(int id)
        {
            return base.Channel.DeleteMediaAsync(id);
        }
        
        public System.Threading.Tasks.Task<bool> AddPersonAsync(string firstName, string lastName)
        {
            return base.Channel.AddPersonAsync(firstName, lastName);
        }
        
        public System.Threading.Tasks.Task<ServiceReferenceMedia.Person[]> GetAllPeopleAsync()
        {
            return base.Channel.GetAllPeopleAsync();
        }
        
        public System.Threading.Tasks.Task<ServiceReferenceMedia.Person> GetPersonAsync(string firstName, string lastName)
        {
            return base.Channel.GetPersonAsync(firstName, lastName);
        }
        
        public System.Threading.Tasks.Task<ServiceReferenceMedia.Person> GetOrCreatePersonAsync(string firstName, string lastName)
        {
            return base.Channel.GetOrCreatePersonAsync(firstName, lastName);
        }
        
        public System.Threading.Tasks.Task<string[]> GetAllPeopleNamesAsync()
        {
            return base.Channel.GetAllPeopleNamesAsync();
        }
        
        public System.Threading.Tasks.Task<ServiceReferenceMedia.Person> GetPersonByIdAsync(int id)
        {
            return base.Channel.GetPersonByIdAsync(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePersonAsync(int id)
        {
            return base.Channel.DeletePersonAsync(id);
        }
        
        public System.Threading.Tasks.Task<bool> AddEventAsync(string name, string location)
        {
            return base.Channel.AddEventAsync(name, location);
        }
        
        public System.Threading.Tasks.Task<ServiceReferenceMedia.Event[]> GetAllEventsAsync()
        {
            return base.Channel.GetAllEventsAsync();
        }
        
        public System.Threading.Tasks.Task<ServiceReferenceMedia.Event> GetEventAsync(string location, string name)
        {
            return base.Channel.GetEventAsync(location, name);
        }
        
        public System.Threading.Tasks.Task<ServiceReferenceMedia.Event> GetOrCreateEventAsync(string location, string name)
        {
            return base.Channel.GetOrCreateEventAsync(location, name);
        }
        
        public System.Threading.Tasks.Task<string[]> GetEventNamesAsync()
        {
            return base.Channel.GetEventNamesAsync();
        }
        
        public System.Threading.Tasks.Task<string[]> GetEventLocationAsync()
        {
            return base.Channel.GetEventLocationAsync();
        }
        
        public System.Threading.Tasks.Task<ServiceReferenceMedia.Event> GetEventByIdAsync(int id)
        {
            return base.Channel.GetEventByIdAsync(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteEventAsync(int id)
        {
            return base.Channel.DeleteEventAsync(id);
        }
        
        public System.Threading.Tasks.Task<bool> AddScenaryAsync(string season, string type)
        {
            return base.Channel.AddScenaryAsync(season, type);
        }
        
        public System.Threading.Tasks.Task<ServiceReferenceMedia.Scenary> GetScenaryAsync(string season, string type)
        {
            return base.Channel.GetScenaryAsync(season, type);
        }
        
        public System.Threading.Tasks.Task<ServiceReferenceMedia.Scenary> GetOrCreateScenaryAsync(string season, string type)
        {
            return base.Channel.GetOrCreateScenaryAsync(season, type);
        }
        
        public System.Threading.Tasks.Task<ServiceReferenceMedia.Scenary[]> GetAllScenariesAsync()
        {
            return base.Channel.GetAllScenariesAsync();
        }
        
        public System.Threading.Tasks.Task<string[]> GetAllScenaryTypesAsync()
        {
            return base.Channel.GetAllScenaryTypesAsync();
        }
        
        public System.Threading.Tasks.Task<ServiceReferenceMedia.Scenary> GetScenaryByIdAsync(int id)
        {
            return base.Channel.GetScenaryByIdAsync(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteScenaryAsync(int id)
        {
            return base.Channel.DeleteScenaryAsync(id);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IPostMedia))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IPostMedia))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8000/PC");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return PostMediaClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IPostMedia);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return PostMediaClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IPostMedia);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IPostMedia,
        }
    }
}
